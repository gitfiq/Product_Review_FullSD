@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable

<style>
    /*Rating*/
    .rating-container {
        display: flex;
    }
    /* Remaining CSS for star rating */
    .star-rating {
        color: #ffc107;
    }

    /*Products*/
    .product-container {
        display: flex;
        max-width: 75vw;
        margin: auto;
    }

    .product-image {
        flex: 1;
        padding: 20px;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
    }

    .product-details {
        flex: 2;
        padding: 20px;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
    }

    .product-image img {
        width: 100%;
        height: auto;
        max-width: 100%;
    }

    /*Recommendations*/
    .recommendation-container {
        max-width: 75vw;
        margin: auto;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
        padding: 20px;
    }

    /*Reviews*/
    .review-container {
        max-width: 75vw;
        margin: auto;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
        padding: 20px;
    }

    .review-item {
        max-width: 70vw;
        margin: auto;
        padding: 20px;
    }

    :root {
        --star-size: 20px;
        --star-color: #fff;
        --star-background: #fc0;
    }

    .Stars {
        --percent: calc(var(--rating) / 5 * 100%);
        display: inline-block;
        font-size: var(--star-size);
        font-family: Times;
        line-height: 1;
    }

        .Stars::before {
            content: "★★★★★";
            letter-spacing: 3px;
            background: linear-gradient(90deg, var(--star-background) var(--percent), var(--star-color) var(--percent));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

    .btnCreate {
        background-color: #213555;
        color: #E1D9D1;
        width: 300px;
    }

        .btnCreate:hover {
            color: white;
        }

    .button-navigation {
        display: flex; /* Arrange buttons horizontally */
        justify-content: space-evenly; /* Evenly distribute space */
    }
</style>


<EditForm Model="@book" OnValidSubmit="@OnValidSubmit">
    @if (loading)
        {
        <p>Loading data...</p>
    }
    else
    {
        <div class="product-container">
            <div class="product-image">
                @if (book != null)
                {
                    @if (book.Image != null)
                    {
                        <img src="@(book.Image != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(book.Image)}" : "path/to/default/image.jpg")" alt="Book Image" />

                    }
                    else
                    {
                        <img src="https://islandpress.org/sites/default/files/default_book_cover_2015.jpg" alt="Book Image">
                    }
                }
                else
                {
                    <p>Book Image is not available</p>
                }
            </div>
            <div class="product-details">
                <h1>@book.Title</h1>

                @if (Books != null && Publishers != null)
                {
                    @foreach (var Publisher in Publishers)
                    {
                        @if (Publisher.Id == book.PublisherID)
                        {
                            <h3>@Publisher.PublisherName</h3>
                        }
                    }
                }

                <div class="rating-container">
                    <div class="Stars" style="--rating: @averageRating;" aria-label="rating">
                        @averageRating
                    </div>
                </div>

                <p>@book.Description</p>
                <h2>Details:</h2>
                <ul>
                    <li>Publication Year: @book.PublishYear</li>
                    <li>Subject: @book.Subject</li>
                    <li>School Level: @book.SchoolLevel</li>
                    <li>Number Of Pages: @book.NumberOfPages</li>
                    <li>Edition: @book.Edition</li>
                </ul>
            </div>
        </div>
        <div class="recommendation-container">
            <h1>Recommendations from our staffs:</h1>
            <br />
            @if (Books != null)
            {
                @if (Recommendations != null)
                {
                    @foreach (var Recommendation in Recommendations)
                    {
                        @if (book.Id == Recommendation?.BookID)
                        {
                            @if (Recommendation != null && Recommendation.Staff != null)
                            {
                                <p>@Recommendation.Description <b>-@Recommendation.Staff.FirstName @Recommendation.Staff.LastName; @Recommendation.DateUpdated</b></p>
                            }
                            else
                            {
                                <p>Recommendations are not available.</p>
                            }
                        }
                    }
                }

            }
        </div>
        <div class="review-container">
            <a href="products/review/create/@book.Id" class="btn btnCreate">
                <span class="oi oi-plus"></span>
                Write Review for this book
            </a>
            <br /><br />

            <h1>User Reviews:</h1>
            @if (Books != null && Reviews != null)
            {
                @foreach (var Review in Reviews)
                {
                    @if (book.Id == Review.BookID)
                    {

                        <div class="review-item">
                            <h3><b>@Review.Title</b></h3>
                            <div class="rating-container">
                                <p>Rating: @Review.UserRating </p>
                                <div class="star-rating" style="margin-right: 10px;">
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        @if (Review.UserRating >= i + 1)
                                        {
                                            <span>&#9733;</span> <!-- Filled star character -->
                                        }
                                        else
                                        {
                                            <span>&#9734;</span> <!-- Empty star character -->
                                        }
                                    }
                                </div>
                                <div> Reviewed on: @Review.DateCreated.ToString("dd/MM/yyyy")</div>
                            </div>
                            <p>@Review.Content</p>
                            <br>
                            <a href="/products/review/edit/@Review.Id/@book.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(Review.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </div>

                    }
                }
            }
            else
            {
                <p>Loading reviews....</p>
            }
        </div>

        <br />
        <div class="button-navigation">
            <button class="btn btn-outline-dark btn-block" @onclick="NavigateToBook">
                <span class="oi oi-arrow-left"></span>
                Back to Catalog
            </button>
        </div>
        <br />
    }

</EditForm>

@code {
    public double averageRating;
    public double totalRating = 0;
    public int totalCount = 0;
    private bool loading = true;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Book? book { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private List<Recommendation>? Recommendations;
    private List<Book>? Books;
    private IList<Publisher>? Publishers;
    private IList<Review>? Reviews;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        loading = true; // Set loading to true initially

        Recommendations = await _client.GetFromJsonAsync<List<Recommendation>>($"{Endpoints.RecommendationsEndpoint}");
        Books = await _client.GetFromJsonAsync<List<Book>>($"{Endpoints.BooksEndpoint}");
        Publishers = await _client.GetFromJsonAsync<List<Publisher>>($"{Endpoints.PublishersEndpoint}");
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        CalculateAverageRating();

        loading = false; // Set loading to false after data is fetched
    }
    private void CalculateAverageRating()
    {
        foreach (var review in Reviews)
        {
            if (book.Id == review.BookID)
            {
                totalRating += review.UserRating;
                totalCount++;
            }
        }

        if (totalCount > 0)
        {
            averageRating = totalRating / totalCount;
            averageRating = Math.Round(averageRating, 1);
        }
        else
        {
            averageRating = 0; // Handle case where there are no reviews
        }
    }

    private async Task NavigateToBook()
    {
        _navManager.NavigateTo($"/products/");
    }

    async Task Delete(int reviewId)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.Title}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
