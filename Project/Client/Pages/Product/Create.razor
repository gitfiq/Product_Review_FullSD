@page "/products/review/create/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h1>Create Review</h1>

@if (book != null)
{
    <h3>Writting review for: @book.Title</h3>
    <br />
}
else
{
    <h1>Reviews are not available yet.. </h1>
}

<EditForm Model="@review" OnValidSubmit="CreateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disable">
        <div class="form-group">
            <label>Book Id: </label>
            <div>
                <InputNumber @bind-Value="@review.BookID" class="form-control" />
                <ValidationMessage For="@(() => review.BookID)" />
            </div>
        </div>
        <br />
    </fieldset>

    <div class="form-group">
        <label>Review Rating: </label>
        <div>
            <InputNumber @bind-Value="@review.UserRating" class="form-control" />
            <ValidationMessage For="@(() => review.UserRating)" />
        </div>
    </div>
    <br />

    <div class="form-group">
        <label>Review Title: </label>
        <div>
            <InputText @bind-Value="@review.Title" class="form-control" />
            <ValidationMessage For="@(() => review.Title)" />
        </div>
    </div>
    <br />

    <div class="form-group">
        <label>Review Content: </label>
        <div>
            <InputText @bind-Value="@review.Content" class="form-control" />
            <ValidationMessage For="@(() => review.Content)" />
        </div>
    </div>
    <br />

    <div class="form-group">
        <label>User: </label>
        <div>
            <InputSelect @bind-Value="review.AppUserID" class="form-control">
                <option value="">-- Select App User --</option>
                @if (AppUsers != null)
                {
                    foreach (var appUser in AppUsers)
                    {
                        <option value="@appUser.Id">@appUser.Username</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => review.AppUserID)" />
        </div>
    </div>
    <br />

    <button type="submit" class="btn btn-success btn-block">
        Create Review
    </button>

</EditForm>

@code {
    [Parameter] public int id { get; set; }
    [Parameter] public bool Disable { get; set; } = true;
    
    Review? review = new Review();
    Book? book = new Book();

    private IList<AppUser>? AppUsers;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AppUsersEndpoint}");
        book = await _client.GetFromJsonAsync<Book>($"{Endpoints.BooksEndpoint}/{id}");
        review.BookID = book?.Id;
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
        _navManager.NavigateTo($"/products/view/{id}");
    }
}
