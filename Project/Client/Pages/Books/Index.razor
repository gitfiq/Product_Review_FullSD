@page "/books/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<head>
    <style>
        .btnCreate { background-color: #00008B; color: #E1D9D1; width: 300px; }
        .btnCreate:hover { color: white; }

        .image { width: 250px; }

        img { width: 100%; height: 100%; object-fit: contain; border-radius: 15px;}

    </style>
</head>


<h3 class="card-title">Manage Books</h3>
<br />


<a href="/books/create" class="btn btnCreate">
    <span class="oi oi-plus"></span>
    Add New Book
</a>

<br />
<br />
<br />

@if (Books == null)
{
    <div class="alert alert-info">Loading Books...</div>
}
else
{
    <table class="table table-responsive" id="booksTable">
        <thead>
            <tr>
                <th>Book Image</th>
                <th>Title</th>
                <th>Rating</th>
                <th>Publish Year</th>
                <th>Subject</th>
                <th>School Level</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Book in Books)
            {
                <tr>
                    <td class="image">
                        @if (Book.Image != null)
                        {
                            <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Book.Image))" alt="Book Image" />
                        }
                        else
                        {
                            <img src="https://islandpress.org/sites/default/files/default_book_cover_2015.jpg" alt="Book Image">
                        }
                    </td>
                    <td>@Book.Title</td>
                    <td>@if (Book.BookRating != null)
                        {
                            @Book.BookRating
                        }
                        else
                        {
                            <text>0</text>
                        }
                    </td>
                    <td>@Book.PublishYear</td>
                    <th>@Book.Subject</th>
                    <th>@Book.SchoolLevel</th>
                    <td>
                        <a href="/books/view/@Book.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/books/edit/@Book.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(Book.Id))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Book>? Books;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Books = await _client.GetFromJsonAsync<List<Book>>($"{Endpoints.BooksEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#booksTable");
    }

    async Task Delete(int BookId)
    {
        if (Books != null)
        {
            var Book = Books.First(q => q.Id == Id);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Book.Title}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.BooksEndpoint}/{Id}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#booksTable");
        _interceptor.DisposeEvent();
    }
}
