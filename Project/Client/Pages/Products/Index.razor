@page "/products/"
@using System.Diagnostics
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<head>
    <style>
        .flexbox {
            display: flex;
            height: 100%; /* Make the flexbox fill the height of the parent container */
        }

        .left-division {
            flex: 1; /* Occupy remaining space */
            overflow-y: auto; /* Enable vertical scrolling */
            padding: 20px;
            background-color: #f0f0f0; /* Add background color for left division */
        }

        .divider {
            width: 1px; /* Width of the divider line */
            background-color: #ddd; /* Color of the divider line */
            margin: 0 20px; /* Adjust the margin to control the gap */
        }

        .grid-container {
            flex: 5; /* Occupy 3/4 of the space */
            overflow-y: auto; /* Enable vertical scrolling */
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            justify-items: center; /* Center align items */
        }

        .card {
            border: 1px solid #ddd;
            border-radius: 10px;
            overflow: hidden;
            background-color: #f9f9f9;
            width: 250px; /* Set fixed width */
            height: 600px; /* Set a fixed height for the card */
            display: flex; /* Use flexbox for card layout */
            flex-direction: column; /* Arrange child elements vertically */
        }

            .card img {
                width: 250px;
                height: 350px; /* Let the height adjust dynamically */
                object-fit: contain;
            }

        .card-body {
            padding: 15px;
            flex: 1; /* Occupy remaining space */
            display: flex; /* Use flexbox for body layout */
            flex-direction: column; /* Arrange child elements vertically */
        }

        .card-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #000; /* Default color */
            transition: color 0.3s; /* Smooth color transition */
            cursor: pointer; /* Change cursor to pointer on hover */
        }

            .card-title:hover {
                color: #ff7f00; /* Orange color on hover */
            }

        .card-publisher {
            font-size: 14px;
            margin-bottom: 5px;
        }

        .card-link {
            display: inline-block;
            padding: 8px 15px;
            background-color: #00008b;
            color: #ffffff;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

            .card-link:hover {
                background-color: #0040ff;
            }

        /*Stars*/
        :root {
            --star-size: 20px;
            --star-color: #fff;
            --star-background: #fc0;
        }

        .Stars {
            --percent: calc(var(--rating) / 5 * 100%);
            display: inline-block;
            font-size: var(--star-size);
            color: #ffd700;
            line-height: 1;
        }

            .Stars::before {
                content: "★★★★★";
                letter-spacing: 3px;
                background: linear-gradient(90deg, var(--star-background) var(--percent), var(--star-color) var(--percent));
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }
    </style>

</head>

<h3 class="card-title">View Catalog</h3>
<div class="flexbox">
    <div class="left-division">
        <!-- Left division content here -->
        Filters
    </div>

    <div class="divider"></div> <!-- Divider line -->
    <div class="grid-container">

        <!-- Right grid display -->
        @if (Books == null)
        {
            <div class="alert alert-info">Loading Catalog...</div>
        }
        else
        {
            @foreach (var Book in Books)
            {
                <div class="card">
                    <a href="/products/view/@Book.Id">
                        <!-- Wrap the img with an anchor tag -->
                        <img src="@(Book.Image != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(Book.Image)}" : "https://islandpress.org/sites/default/files/default_book_cover_2015.jpg")" alt="Book Image" />
                    </a>
                    <div class="card-body">
                        <div class="card-title">@Book.Title</div>
                        <div class="card-publisher">@Book.Publisher.PublisherName</div>
                        <div class="Stars" style="--rating: @CalculateAverageRating(Book.Id);" aria-label="rating">
                            @CalculateAverageRating(Book.Id)
                        </div>
                        <div>@Book.Edition</div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<Book>? Books;
    private List<Review>? Reviews;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Books = await _client.GetFromJsonAsync<List<Book>>($"{Endpoints.BooksEndpoint}");
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }

    public double CalculateAverageRating(int bookId)
    {
        double totalRating = 0;
        int totalCount = 0;

        if (Reviews != null)
        {
            foreach (var review in Reviews)
            {
                if (review.BookID == bookId)
                {
                    totalRating += review.UserRating;
                    totalCount++;
                }
            }

            if (totalCount > 0)
            {
                double averageRating = totalRating / totalCount;
                return Math.Round(averageRating, 1); // Round to one decimal place
            }
        }

        return 0; // If no reviews or no reviews for the specified book
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#booksTable");
        _interceptor.DisposeEvent();
    }
}
