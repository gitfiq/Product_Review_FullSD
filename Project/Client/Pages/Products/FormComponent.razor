@inject HttpClient _client

<style>
    /*Rating*/
    .rating-container {
        display: flex; 

    }
    /* Remaining CSS for star rating */
    .star-rating {
        color: #ffc107;
    }

    /*Products*/
    .product-container {
        display: flex;
        max-width: 75vw; 
        margin: auto; 
    }

    .product-image {
        flex: 1; 
        padding: 20px; 
        border: 2px solid #ddd; 
        background-color: #f4f4f4; 
    }

    .product-details {
        flex: 2; 
        padding: 20px;
        border: 2px solid #ddd; 
        background-color: #f4f4f4; 
    }

    .product-image img {
        width: 100%;
        height: auto;
        max-width: 100%; 
    }

    /*Recommendations*/
    .recommendation-container {
        max-width: 75vw;
        margin: auto;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
        padding: 20px;
    }

    /*Reviews*/
    .review-container {
        max-width: 75vw;
        margin: auto;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
        padding: 20px;
    }
    .review-item{
        max-width: 70vw;
        margin: auto;
        padding: 20px;
    }

    :root {
        --star-size: 20px;
        --star-color: #fff;
        --star-background: #fc0;
    }

    .Stars {
        --percent: calc(var(--rating) / 5 * 100%);
        display: inline-block;
        font-size: var(--star-size);
        font-family: Times;
        line-height: 1;
    }

    .Stars::before {
        content: "★★★★★";
        letter-spacing: 3px;
        background: linear-gradient(90deg, var(--star-background) var(--percent), var(--star-color) var(--percent));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
</style>


<EditForm Model="@book" OnValidSubmit="@OnValidSubmit">
    <BackToList Target="products" />
    
    <div class="product-container">
        <div class="product-image">
            @if (book != null){
                @if (book.Image != null)
                {
                    <img src="@(book.Image != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(book.Image)}" : "path/to/default/image.jpg")" alt="Book Image" />

                }
                else
                {
                    <img src="https://islandpress.org/sites/default/files/default_book_cover_2015.jpg" alt="Book Image">
                }
            }
            else
            {
                <p>books is null</p>
            }
        </div>
        <div class="product-details">
            <h1>@book.Title</h1>
            <h2>@book.Edition</h2>

            @if (Books != null && Publishers != null)
            {
                @foreach (var Publisher in Publishers)
                {
                    @if(Publisher.Id == book.PublisherID)
                    {
                        <h3>@Publisher.PublisherName</h3>
                    }
                    else
                    {
                        <h3>No publisher found</h3>
                    }
                }
            }

            <div class="rating-container">
                <div class="Stars" style="--rating: @averageRating;" aria-label="rating">
                    @averageRating
                </div>
            </div>

            <p>@book.Description</p>
            <h2>Details:</h2>
            <ul>
                <li>Publication Year: @book.PublishYear</li>
                <li>Subject: @book.Subject</li>
                <li>School Level: @book.SchoolLevel</li>
                <li>Number Of Pages: @book.NumberOfPages</li>
            </ul>
        </div>
        -
    </div>
    <div class="recommendation-container">
        <h1>About this book:</h1>
        @if (Books != null)
        {
            @foreach (var Book in Books)
            {
                @if (Recommendations != null)
                {
                    @foreach (var Recommendation in Recommendations)
                    {
                        @if (Book.Id == Recommendation?.BookID)
                        {
                            @if (Recommendation != null && Recommendation.Staff != null)
                            {
                                <p>@Recommendation.Description <b>-@Recommendation.Staff.FirstName @Recommendation.Staff.LastName; @Recommendation.DateUpdated</b></p>
                            }
                            else
                            {
                                <p>NULL! Publisher information not available.</p>
                            }
                        }
                    }
                }
            }
        }
    </div>
    <div class="review-container">
        <a href="products/create/@book.Id" class="btn btn-secondary">
            <span class="oi oi-plus"></span>
            Write Review for this book
        </a>
        <h1>User Reviews:</h1>
        @if (Books != null)
        {
            @foreach (var Book in Books)
            {
                @if (Reviews != null)
                {
                    @foreach (var Review in Reviews)
                    {
                        @if (Book.Id == Review?.BookID)
                        {
                            @if (Review != null)
                            {
                                <div class="review-item">
                                    <h3><b>@Review.Title</b></h3>
                                    <div class="rating-container">
                                        <p>Rating: @Review.UserRating </p>
                                        <div class="star-rating">
                                            @for (int i = 0; i < 5; i++)
                                            {
                                                @if (Review.UserRating >= i + 1)
                                                {
                                                    <span>&#9733;</span> <!-- Filled star character -->
                                                }
                                                else
                                                {
                                                    <span>&#9734;</span> <!-- Empty star character -->
                                                }
                                            }
                                        </div>
                                    </div>
                                    <p>@Review.Content</p>
                                </div>
                            }
                            else
                            {
                                <p>NULL! Review information not available.</p>
                            }
                        }
                    }

                }
                else
                {
                    <p>Reviews is null</p>
                }

            }
        }
        else
        {
            <p>Books is null!</p>
        }
    </div>
</EditForm>
@code {
    public double averageRating;
    public double totalRating = 0;
    public int totalCount = 0;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Book? book { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private List<Recommendation>? Recommendations;
    private List<Book>? Books;
    private IList<Publisher>? Publishers;
    private IList<Review>? Reviews;

    protected async override Task OnInitializedAsync()
    {
        Recommendations = await _client.GetFromJsonAsync<List<Recommendation>>($"{Endpoints.RecommendationsEndpoint}");
        Books = await _client.GetFromJsonAsync<List<Book>>($"{Endpoints.BooksEndpoint}");
        Publishers = await _client.GetFromJsonAsync<List<Publisher>>($"{Endpoints.PublishersEndpoint}");
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        CalculateAverageRating();
    }
    private void CalculateAverageRating()
    {
        foreach (var review in Reviews)
        {
            foreach (var book in Books)
            {
                if (book.Id == review.BookID)
                {
                    totalRating += review.UserRating;
                    totalCount++;
                }
            }

        }

        if (totalCount > 0)
        {
            averageRating = totalRating / totalCount;
            averageRating = Math.Round(averageRating,1);
        }
        else
        {
            averageRating = 0; // Handle case where there are no reviews
        }
    }
}
