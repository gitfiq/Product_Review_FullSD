@inject HttpClient _client

<style>
    /*Products*/
    .product-container {
        display: flex;
        max-width: 75vw; 
        margin: auto; 
    }

    .product-image {
        flex: 1; 
        padding: 20px; 
        border: 2px solid #ddd; 
        background-color: #f4f4f4; 
    }

    .product-details {
        flex: 2; 
        padding: 20px;
        border: 2px solid #ddd; 
        background-color: #f4f4f4; 
    }

    .product-image img {
        width: 100%;
        height: auto;
        max-width: 100%; 
    }

    /*Recommendations*/
    .recommendation-container {
        max-width: 75vw;
        margin: auto;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
        padding: 20px;
    }

    /*Reviews*/
    .review-container {
        max-width: 75vw;
        margin: auto;
        border: 2px solid #ddd;
        background-color: #f4f4f4;
        padding: 20px;
    }
</style>


<EditForm Model="@book" OnValidSubmit="@OnValidSubmit">
    <BackToList Target="products" />
    
    <div class="product-container">

        <div class="product-image">
            <img src="@(book.Image != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(book.Image)}" : "path/to/default/image.jpg")" alt="Book Image" />
        </div>
        <div class="product-details">
            <h1>@book.Title</h1>
            <h2>@book.Edition</h2>
            @foreach (var Book in Books)
            {
                @foreach (var Publisher in Publishers)
                {
                    @if (Book.PublisherID == Publisher?.Id)
                    {
                        @if (Publisher != null)
                        {
                            <h3>@Publisher.PublisherName</h3>
                        }
                        else
                        {
                            <p>NULL! Publisher information not available.</p>
                        }
                    }
                }
            }
            
            <p>Rating: @book.BookRating</p>
            <p>@book.Description</p>
            <h2>Details:</h2>
            <ul>
                <li>Publication Year: @book.PublishYear</li>
                <li>Subject: @book.Subject</li>
                <li>School Level: @book.SchoolLevel</li>
                <li>Number Of Pages: @book.NumberOfPages</li>
            </ul>
        </div>
    </div>
    <!--
    <div class="recommendation-container">
        <h1>About this book:</h1>
        <p>
            @foreach (var Book in Books)
            {
                @foreach (var Recommendation in Recommendations)
                {
                    @if (Book.Id == Recommendation?.BookID)
                    {
                        @if (Recommendation != null)
                        {
                            <p>@Recommendation.Description <b>-@Recommendation.Staff.FirstName @Recommendation.Staff.LastName; @Recommendation.DateUpdated</b></p>
                        }
                        else
                        {
                            <p>NULL! Publisher information not available.</p>
                        }
                    }
                }
            }
        </p>
    </div>
    <div class="review-container">
        <h1>User Reviews:</h1>
        <p>
            @foreach (var Book in Books)
            {
                @foreach (var Review in Reviews)
                {
                    @if (Book.Id == Review?.BookID)
                    {
                        @if (Review != null)
                        {
                            <h3>@Review.Title</h3>
                        }
                        else
                        {
                            <p>NULL! Review information not available.</p>
                        }
                    }
                }
            }
        </p>
    </div>
    -->
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Book? book { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private List<Recommendation>? Recommendations;
    private List<Book>? Books;
    private IList<Publisher>? Publishers;
    private IList<Review>? Reviews;

    protected async override Task OnInitializedAsync()
    {
        Recommendations = await _client.GetFromJsonAsync<List<Recommendation>>($"{Endpoints.RecommendationsEndpoint}");
        Books = await _client.GetFromJsonAsync<List<Book>>($"{Endpoints.BooksEndpoint}");
        Publishers = await _client.GetFromJsonAsync<List<Publisher>>($"{Endpoints.PublishersEndpoint}");
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
    }
}
