@page "/products/create/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h1>Create Review</h1>
@if (book != null)
{
    <h3>@book.Title; @book.Subject; @book.Id</h3>
}
else
{
    <h1>NULL!</h1>
}

<EditForm Model="@review" OnValidSubmit="CreateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <label>Review Rating: </label>
    <div>
        <InputNumber @bind-Value="@review.UserRating" class="form-control" />
        <ValidationMessage For="@(() => review.UserRating)" />
    </div>

    <label>Review Title: </label>
    <div>
        <InputText @bind-Value="@review.Title" class="form-control" />
        <ValidationMessage For="@(() => review.Title)" />
    </div>
    <label>Review Content: </label>
    <div>
        <InputText @bind-Value="@review.Content" class="form-control" />
        <ValidationMessage For="@(() => review.Content)" />
    </div>
    <label>User: </label>
    <div>
        <InputSelect @bind-Value="review.AppUserID" class="form-control">
            <option value="">-- Select App User --</option>
            @if (AppUsers != null)
            {
                foreach (var appUser in AppUsers)
                {
                    <option value="@appUser.Id">@appUser.Username</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => review.AppUserID)" />
    </div>
    <button type="submit" class="btn btn-success btn-block">
        Create Review
    </button>

</EditForm>

@code {
    [Parameter] public int id { get; set; }

    Book book = new Book();

    Review review = new Review();

    private IList<AppUser>? AppUsers;

    protected async override Task OnInitializedAsync()
    {
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AppUsersEndpoint}");
        book = await _client.GetFromJsonAsync<Book>($"{Endpoints.BooksEndpoint}/{id}");
    }
    private async Task CreateReview()
    {
        review.BookID = book.Id;
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
        _navManager.NavigateTo($"/products/view/{id}");
    }
}
    