@page "/reviews/create/"
@using Project.Client.Static
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Review</h3>
<hr />
<br />

<EditForm Model="@review" OnValidSubmit="CreateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Book: </label>
            <div>
                <InputSelect @bind-Value="review.BookID" class="form-control">
                    <option value="">-- Select Book --</option>
                    @if (Books != null)
                    {
                        foreach (var book in Books)
                        {
                            <option value="@book.Id">@book.Title</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => review.BookID)" />
            </div>
        </div>

        <label>Review Rating: </label>
        <div>
            <InputNumber @bind-Value="@review.UserRating" class="form-control" />
            <ValidationMessage For="@(() => review.UserRating)" />
        </div>

        <label>Review Title: </label>
        <div>
            <InputText @bind-Value="@review.Title" class="form-control" />
            <ValidationMessage For="@(() => review.Title)" />
        </div>
        <label>Review Content: </label>
        <div>
            <InputText @bind-Value="@review.Content" class="form-control" />
            <ValidationMessage For="@(() => review.Content)" />
        </div> 
        <label>User: </label>
            <div>
                <InputSelect @bind-Value="review.AppUserID" class="form-control">
                    <option value="">-- Select App User --</option>
                    @if (AppUsers != null)
                    {
                        foreach (var appUser in AppUsers)
                        {
                            <option value="@appUser.Id">@appUser.Username</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => review.AppUserID)" />
            </div>
    <button type="submit" class="btn btn-success btn-block">
        Create Review
    </button>

</EditForm>


@code {
    Review review = new Review();

    private IList<AppUser>? AppUsers;
    private IList<Book>? Books;

    protected async override Task OnInitializedAsync()
    {
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AppUsersEndpoint}");
        Books = await _client.GetFromJsonAsync<List<Book>>($"{Endpoints.BooksEndpoint}");
    }
    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
        _navManager.NavigateTo("/reviews/");
    }
}