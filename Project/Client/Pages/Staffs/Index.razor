@page "/staffs/"
@inject HttpClient _client  
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable


<head>
    <style>

        .btnCreate {
            background-color: #213555;
            color: #E1D9D1;
            width: 300px;
        }
        .btnCreate:hover { color: white; }

    </style>
</head>


<h3 class="card-title">Manage Staff</h3> <br />


<a href="/staffs/create" class="btn btnCreate">
    <span class="oi oi-plus"></span>
    Add New Staff
</a>
<br />
<br />
<br />

@if (Staffs == null)
{
    <div class="alert alert-info">Looding Staffs....</div>
}
else
{
    <table class="table table-responsive" id="staffsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Username</th>
                <th>Contact Info</th>
                <th>Email Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Staff in Staffs)
            {
                <tr>
                    <td>@Staff.FirstName  @Staff.LastName</td>
                    <td>@Staff.Username</td>
                    <td>@Staff.ContactInfo</td>
                    <th>@Staff.EmailAddress</th>
                    <td>
                        <a href="/staffs/view/@Staff.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/staffs/edit/@Staff.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(Staff.Id))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#staffsTable");
    }

    async Task Delete(int StaffId)
    {
        if (Staffs != null)
        {
            var Staff = Staffs.First(q => q.Id == StaffId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Staff.Username}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{StaffId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#staffsTable");
        _interceptor.DisposeEvent();
    }
}

